<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
        <!--Spring的配置文件，这里主要配置和业务逻辑相关的-->
        <!--数据源，事务控制，xxx-->
        <context:property-placeholder location="classpath:db.properties"/>
        <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
            <!--驱动类名 -->
            <property name="driverClass" value="${jdbc.driverClass}"/>
            <!-- url -->
            <property name="jdbcUrl" value="${jdbc.url}" />
            <!-- 用户名 -->
            <property name="user" value="${jdbc.user}" />
            <!-- 密码 -->
            <property name="password" value="${jdbc.password}" />
            <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
            <property name="acquireIncrement" value="5"></property>
            <!-- 初始连接池大小 -->
            <property name="initialPoolSize" value="10"></property>
            <!-- 连接池中连接最小个数 -->
            <property name="minPoolSize" value="5"></property>
            <!-- 连接池中连接最大个数 -->
            <property name="maxPoolSize" value="20"></property>
        </bean>
        <context:component-scan base-package="com.huike">
            <!-- 只扫描Controller控制器 -->
            <context:include-filter type="annotation"
                                    expression="org.springframework.stereotype.Controller" />
        </context:component-scan>
        <!--配置与MyBatis的整合-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="datasource" />
            <!-- 文件映射器，指定类文件 -->
            <property name="configLocation" value="classpath:mybatis.xml"/>
            <!-- 自动扫描mapping.xml文件 -->
            <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        </bean>

        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.huike.dao"/>
        </bean>
        <bean id="transactionManager"
              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="datasource" />
        </bean>

        <!--开启基于注解的事务，使用xml配置形式的事务(必要主要的都是使用配置式)-->
        <aop:config>
            <!--切入点表达式-->
            <aop:pointcut id="txPoint" expression="execution(* com.huike.service..*(..))"/>
            <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
        </aop:config>
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!--所有方法都是事务方法-->
                <tx:method name="*"/>
                <!--以get开始的所有方法-->
                <tx:method name="get*" read-only="true"/>

            </tx:attributes>
        </tx:advice>

    <!--配置一个可以使用批量的sqlSeesion-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH">
        </constructor-arg>
    </bean>
</beans>